image: python:3.8
stages:
  - test
  - git-robot

.checkout_siibra:
  variables:
    SIIBRA_PYTHON_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/siibra-python
    SIIBRA_PYTHON_BRANCH: v0.4EOL
    GIT_DEPTH: 1
  before_script: |
    echo "[DEVELOP BUILD] Using $SIIBRA_PYTHON_BRANCH branch. In prod, use main branch instead."
    rm -rf $SIIBRA_PYTHON_PATH
    git clone -v -b $SIIBRA_PYTHON_BRANCH \
      https://github.com/FZJ-INM1-BDA/siibra-python.git \
      $SIIBRA_PYTHON_PATH
    git -C $SIIBRA_PYTHON_PATH log -n 1
    

.install_requirement:
  before_script: |
    pip install -U pip
    pip install -r _ci/requirements.txt

ci:checklist:generate-update:
  only:
  - tags
  trigger:
    include:
    - local: .gitlab-ci.release-checklist.yml
    strategy: depend

ci:test:check_connectivity_json:
  # only check connectivity json if connectivity json files are changed
  # pipeline source needs to be set to merge request event, or else it will trigger everytime
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - features/connectivity/**/*.json
  extends: .checkout_siibra
  stage: test
  script: |
    pip install -r $SIIBRA_PYTHON_PATH/requirements-test.txt
    pip install -r $SIIBRA_PYTHON_PATH/requirements.txt
    SIIBRA_USE_CONFIGURATION=$PWD pytest $SIIBRA_PYTHON_PATH/e2e/features/connectivity/test_connectivity.py

ci:test:check_schema:
  extends: .checkout_siibra
  stage: test
  script: |
    pip install -r $SIIBRA_PYTHON_PATH/config_schema/requirements.txt
    echo python $SIIBRA_PYTHON_PATH/config_schema/check_schema.py $PWD
    git -C $PWD log -n 1
    python $SIIBRA_PYTHON_PATH/config_schema/check_schema.py $PWD

ci:test:check_jsons:
  stage: test
  script: python _ci/verify_json.py

ci:test:check_ebrains_id:
  stage: test
  extends: .install_requirement
  script: python _ci/verify_ebrains_ids.py

ci:test:check_map_volume_idx:
  stage: test
  script: |
    python _ci/verify_volume_idx.py

ci:test:region_attr_compliance:
  stage: test
  script:
    - python ./_ci/region_attr_compliance.py

ci:test:check_maps:
  stage: test
  script: python _ci/verify_maps.py

ci:test:check_maps_precompmesh:
  stage: test
  rules:
  - if: $CI_PIPELINE_SOURCE == "push"
    changes:
    - maps/*.json
  script: |
    pip install -U pip
    pip install -r _ci/requirements.txt
    python _ci/check_precompmesh.py

mirror:push_to_mirror:
  stage: git-robot
  only:
    - master
    - tags
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - git config --global user.email "inm1-bda@fz-juelich.de"
    - git config --global user.name "inm1 bda - gitlab bot"
    - mkdir -p ~/.ssh

    # add $GITLAB_MIRROR_HOST to known hosts
    - ssh-keyscan $GITLAB_MIRROR_HOST >> gitlab-known-hosts
    - cat gitlab-known-hosts >> ~/.ssh/known_hosts
  script:
    # fetch all tags (potentially overwriting local tags to avoid clobbering)
    - git fetch --tags -f
    - git fetch origin master

    # add remote mirror
    - if ! git ls-remote ebrains > /dev/null; then git remote add ebrains https://jugitpusher:${GITLAB_MIRROR_TOKEN}@${GITLAB_MIRROR_HOST}/${GITLAB_MIRROR_REPO_PATH}; fi

    # push all tags and master to remote mirror
    - git push ebrains --tags -f
    - git push ebrains HEAD:master -f # https://forum.gitlab.com/t/src-refspec-master-does-not-match-any/24691/16


.okd-pre:
  stage: git-robot
  rules:
  - if: $OKD_JSC_ENDPOINT == null || $OKD_JSC_TOKEN == null
    when: never
  - if: $CI_COMMIT_REF_NAME == "v0_4_EOL"
    changes:
    - "**/*.json"
  before_script:
  - apt-get update && apt-get install -y jq
  - wget https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
  - tar xzf openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz
  - "export PATH=$PATH:$PWD/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit"
  - oc login https://okd.jsc.hbp.eu:443 --token $OKD_JSC_TOKEN
  - oc project siibra-api

deploy:okd:sync_to_okd:
  extends: .okd-pre
  script:
  - echo "Get one of the worker pod"
  - WORKING_POD=$(oc get pods -l app_role=worker,flavor=rc --output json | jq -r '.items[0].metadata.name')
  - echo "Got $WORKING_POD"
  - echo "Fetch and merge with ff only"
  - oc exec $WORKING_POD -- git -C /siibra-api-volume/brainscapes-configurations/ fetch
  - oc exec $WORKING_POD -- git -C /siibra-api-volume/brainscapes-configurations/ merge --ff-only

deploy:okd:restart_server_pod:
  extends: .okd-pre
  needs:
  - deploy:okd:sync_to_okd
  script: |
    oc rollout latest dc/siibra-api-server-rc

deploy:okd:get_api_queues:
  extends: .okd-pre # does not actually need to extend, but easier to manage stage etc...
  variables:
    SIIBRA_API_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/siibra-api
    SIIBRA_API_BRANCH: master
    GIT_DEPTH: 1
  before_script: |
    echo "[DEVELOP BUILD] Using $SIIBRA_API_BRANCH branch. In prod, use main branch instead."
    rm -rf $SIIBRA_API_PATH
    git clone -v -b $SIIBRA_API_BRANCH \
      https://github.com/FZJ-INM1-BDA/siibra-api.git \
      $SIIBRA_API_PATH
    git -C $SIIBRA_API_PATH log -n 1
  script: |
    queues=$(cd $SIIBRA_API_PATH && python -c 'import api.siibra_api_config as cfg; print(" ".join([f"{q}" for q in cfg._queues]))')
    echo Extracted queues: $queues
    echo "QUEUES=$queues" >> build.env

  artifacts:
    reports:
      dotenv: build.env

deploy:okd:start_new_worker_pods:
  extends: .okd-pre
  needs:
  - job: deploy:okd:sync_to_okd
  - job: deploy:okd:get_api_queues
    artifacts: true
  script: |
    SHORT_REV=$(git rev-parse --short=6 HEAD)
    API_VERSION=c.$SHORT_REV
    echo Inherited queues: $QUEUES
    for queue in $QUEUES
    do
      echo "Processing $queue"
      existing=$(oc get dc -l app_role=worker,queue_name=$queue,siibraapi_version=$API_VERSION --output json | jq '.items | length')
      echo "Found $existing existing dc..."
      if [[ "$existing" == "0" ]]
      then
        echo "No DC found... deploying new app..."

        oc new-app --template=siibra-api-v5-worker-template \
          --param SIIBRA_API_VERSION=$API_VERSION \
          --param FLAVOR=rc \
          --param QUEUE_NAME=$queue \
          --param SIIBRA_API_WORKER_IMAGE=docker-registry.ebrains.eu/siibra/siibra-api:rc-worker

        echo "Setting env var to dc"
        oc get dc -l "siibraapi_version=$API_VERSION,queue_name=$queue"
        oc set env dc -l "siibraapi_version=$API_VERSION,queue_name=$queue" SIIBRA_USE_CONFIGURATION=/siibra-api-volume/brainscapes-configurations
      else
        echo "$existing DC found, skipping..."
      fi
    done

    echo "Printing all overdue resources..."
    oc get dc -l app_role=worker,flavor=rc,siibraapi_version!=$API_VERSION
    echo "Deleting all overdue resources..."
    oc delete dc -l app_role=worker,flavor=rc,siibraapi_version!=$API_VERSION --wait=false

